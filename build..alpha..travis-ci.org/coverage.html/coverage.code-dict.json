{"/home/travis/build/npmtest/node-npmtest-gulp-svg-spritesheet/test.js":"/* istanbul instrument in package npmtest_gulp_svg_spritesheet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-svg-spritesheet/lib.npmtest_gulp_svg_spritesheet.js":"/* istanbul instrument in package npmtest_gulp_svg_spritesheet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_svg_spritesheet = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_svg_spritesheet = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-svg-spritesheet/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-svg-spritesheet && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_svg_spritesheet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_svg_spritesheet\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_svg_spritesheet.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_gulp_svg_spritesheet.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_svg_spritesheet.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_gulp_svg_spritesheet.__dirname +\n                    '/lib.npmtest_gulp_svg_spritesheet.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-svg-spritesheet/node_modules/gulp-svg-spritesheet/index.js":"'use strict';\n\nvar cheerio = require('cheerio'),\n    events = require('events'),\n    fs = require('fs'),\n    gutil = require('gulp-util'),\n    mkdirp = require('mkdirp'),\n    mustache = require('mustache'),\n    packetr = require('./lib/packer.growing'),\n    path = require('path'),\n    through2 = require('through2');\n\n// Consts\nvar PLUGIN_NAME = 'gulp-svg-spritesheet';\n\n// Options\nvar defaults = {\n    cssPathNoSvg: '', // Leave blank if you dont want to specify a fallback\n    cssPathSvg: './test.svg', // CSS path to generated SVG\n    demoDest: '', // Leave blank if you don't want a demo file\n    demoSrc: '../demo.tpl', // The souce or the demo template\n    padding: 0, // Add some padding between sprites\n    pixelBase: 16, // Used to calculate em/rem values\n    positioning: 'vertical', // vertical, horizontal, diagonal or packed\n    templateSrc: '../template.tpl', // The source of the CSS template\n    templateDest: './sprite.scss',\n    units: 'px', // px, em or rem\n    x: 0, // Starting X position\n    y: 0 // Starting Y position\n};\n\n// Sorting functions from Jake Gordon's bin packing algorithm demo\n// https://github.com/jakesgordon/bin-packing\nvar sort = {\n    w       : function (a,b) { return b.w - a.w; },\n    h       : function (a,b) { return b.h - a.h; },\n    max     : function (a,b) { return Math.max(b.w, b.h) - Math.max(a.w, a.h); },\n    min     : function (a,b) { return Math.min(b.w, b.h) - Math.min(a.w, a.h); },\n\n\n    height  : function (a,b) { return sort.msort(a, b, ['h', 'w']);               },\n    width   : function (a,b) { return sort.msort(a, b, ['w', 'h']);               },\n    maxside : function (a,b) { return sort.msort(a, b, ['max', 'min', 'h', 'w']); },\n\n    msort: function(a, b, criteria) {\n      var diff, n;\n      for (n = 0 ; n < criteria.length ; n++) {\n        diff = sort[criteria[n]](a,b);\n        if (diff !== 0)\n          return diff;\n      }\n      return 0;\n    }\n};\n\n\n// This is where the magic happens\nvar spriteSVG = function(options) {\n\n    options = options || {};\n\n    // Extend our defaults with any passed options\n    for (var key in defaults) {\n        options[key] = options[key] || defaults[key];\n    }\n\n    // Create one SVG to rule them all, our sprite sheet\n    var $ = cheerio.load('<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"/>', { xmlMode: true }),\n        $sprite = $('svg'),\n        // This data will be passed to our template\n        data = {\n            cssPathSvg: options.cssPathSvg,\n            height: 0,\n            sprites: [],\n            units: options.units,\n            width: 0\n        },\n        eventEmitter = new events.EventEmitter(),\n        self,\n        x = options.x,\n        y = options.y;\n\n    // When a template file is loaded, render it\n    eventEmitter.on(\"loadedTemplate\", renderTemplate);\n\n    // Generate relative em/rem untis from pixels\n    function pxToRelative(value) {\n        return value / options.pixelBase;\n    }\n\n    // Load a template file and then render it\n    function loadTemplate(src, dest) {\n        fs.readFile(src, function(err, contents) {\n            if(err) {\n                new gutil.PluginError(PLUGIN_NAME, err);\n            }\n\n            var file = {\n                contents: contents.toString(),\n                data: data,\n                dest: dest\n            };\n\n            eventEmitter.emit(\"loadedTemplate\", file);\n        });\n    }\n\n    // Position sprites using Jake Gordon's bin packing algorithm\n    // https://github.com/jakesgordon/bin-packing\n    function packSprites(cb) {\n        var packer = new GrowingPacker();\n\n        // Get coordinates of sprites\n        packer.fit(data.sprites);\n\n        // For each sprite\n        for (var i in data.sprites) {\n            var sprite = data.sprites[i],\n                // Create, initialise and populate an SVG\n                $svg = $('<svg/>')\n                    .attr({\n                        'height': sprite.h,\n                        'viewBox': sprite.viewBox,\n                        'width': sprite.w,\n                        'x': Math.ceil(sprite.fit.x)+options.padding,\n                        'y': Math.ceil(sprite.fit.y)+options.padding\n                    })\n                    .append(sprite.file);\n\n            // Check and set parent SVG width\n            if(sprite.fit.x+sprite.w+options.padding>data.width) {\n                data.width = Math.ceil(sprite.fit.x+sprite.w+options.padding);\n            }\n\n            // Check and set sprite sheet height\n            if(sprite.fit.y+sprite.h+options.padding>data.height) {\n                data.height = Math.ceil(sprite.fit.y+sprite.h+options.padding);\n            }\n\n            // Round up coordinates and add padding\n            sprite.h = Math.ceil(sprite.h);\n            sprite.w = Math.ceil(sprite.w);\n            sprite.x = -Math.abs(Math.ceil(sprite.fit.x))-options.padding;\n            sprite.y = -Math.abs(Math.ceil(sprite.fit.y))-options.padding;\n\n            // Convert to relative units if required\n            if(options.units!=='px') {\n                sprite.h = pxToRelative(sprite.h);\n                sprite.w = pxToRelative(sprite.w);\n                sprite.x = pxToRelative(sprite.x);\n                sprite.y = pxToRelative(sprite.y);\n            }\n\n            // Add the SVG to the sprite sheet\n            $sprite.append($svg);\n\n        }\n\n        // Save the sprite sheet\n        saveSpriteSheet(cb);\n    }\n\n    function positionSprites(cb) {\n        // For each sprite\n        for (var i in data.sprites) {\n\n            var sprite = data.sprites[i];\n\n            // Add padding\n            sprite.x = x+options.padding;\n            sprite.y = y+options.padding;\n\n            // Create, initialise and populate an SVG\n            var $svg = $('<svg/>')\n                    .attr({\n                        'height': sprite.h,\n                        'viewBox': sprite.viewBox,\n                        'width': sprite.w,\n                        'x': Math.ceil(sprite.x),\n                        'y': Math.ceil(sprite.y)\n                    })\n                    .append(sprite.file);\n\n            // Round up coordinates\n            sprite.h = Math.ceil(sprite.h);\n            sprite.w = Math.ceil(sprite.w);\n            sprite.x = -Math.abs(Math.ceil(sprite.x));\n            sprite.y = -Math.abs(Math.ceil(sprite.y));\n\n            // Increment x/y coordinates and set sprite sheet height/width\n            if(options.positioning==='horizontal' || options.positioning==='diagonal') {\n                x+=sprite.w+options.padding;\n                data.width+=sprite.w+options.padding;\n\n                if(options.positioning!=='diagonal' && data.height<sprite.h+options.padding) {\n                    data.height = sprite.h+options.padding;\n                }\n            }\n\n            if(options.positioning==='vertical' || options.positioning==='diagonal') {\n                y+=sprite.h+options.padding;\n                data.height+=sprite.h+options.padding;\n\n                if(options.positioning!=='diagonal' && data.width<sprite.w+options.padding) {\n                    data.width = sprite.w+options.padding;\n                }\n            }\n\n            // Convert to relative units if required\n            if(options.units!=='px') {\n                sprite.h = pxToRelative(sprite.h);\n                sprite.w = pxToRelative(sprite.w);\n                sprite.x = pxToRelative(sprite.x);\n                sprite.y = pxToRelative(sprite.y);\n            }\n\n            // Add the SVG to the sprite sheet\n            $sprite.append($svg);\n\n        }\n\n        // Save the sprite sheet\n        saveSpriteSheet(cb);\n    }\n\n    function processSVG(file, encoding, cb) {\n        // Ignore empty files\n        if (file.isNull()) {\n            return;\n        }\n\n        // We don't do streaming\n        if (file.isStream()) {\n            return cb(new gutil.PluginError(PLUGIN_NAME, 'Streams are not supported'));\n        }\n            // We're using the filename as the CSS class name\n        var filename = path.basename(file.relative, path.extname(file.relative)),\n            // Load the file contents\n            $file = cheerio.load(file.contents.toString('utf8'), {xmlMode: true})('svg'),\n            viewBox = $file.attr('viewBox'),\n            coords = viewBox.split(\" \"),\n            width = $file.attr('width') || coords[2],\n            height = $file.attr('height') || coords[3];\n\n        // Set sprite data to be used by the positioning function\n        var sprite = {\n                fileName: filename,\n                file: $file.contents(),\n                h: parseFloat(height),\n                padding: options.padding,\n                // Round up coordinates to avoid chopping off edges\n                viewBox: Math.ceil(coords[0])+\" \"+Math.ceil(coords[1])+\" \"+Math.ceil(coords[2])+\" \"+Math.ceil(coords[3]),\n                w: parseFloat(width)\n            };\n\n        // Add the sprite to our array\n        data.sprites.push(sprite);\n\n        // Move on to processSprites()\n        cb();\n    }\n\n    function processSprites(cb) {\n        // Save this for referencing in positioning functions\n        self = this;\n        // Sort the sprites so the biggest are first to avoid this issue:\n        // https://github.com/jakesgordon/bin-packing/blob/master/js/packer.growing.js#L10\n        data.sprites.sort(sort.maxside);\n\n        // Lay out the sprites\n        if(options.positioning==='packed') {\n            packSprites(cb);\n        } else {\n            positionSprites(cb);\n        }\n    }\n\n    // Render our template and then save the file\n    function renderTemplate(file) {\n        var compiled = mustache.render(file.contents, file.data);\n        mkdirp(path.dirname(file.dest), function(){\n            fs.writeFile(file.dest, compiled);\n        });\n    }\n\n    // Final processing of sprite sheet then we return file to gulp pipe\n    function saveSpriteSheet(cb) {\n        // Add padding to even edges up\n        data.height+=options.padding;\n        data.width+=options.padding;\n\n        // If there is a non-svg fallback send the path to the template\n        if(options.cssPathNoSvg) {\n            data.cssPathNoSvg = options.cssPathNoSvg;\n        }\n\n        // Set the sprite sheet width, height and viewbox\n        $sprite.attr({\n            'height': data.height,\n            'viewBox': '0 0 '+data.width+' '+data.height,\n            'width': data.width\n        });\n\n        // Convert to relative units if required\n        if(options.units!=='px') {\n            data.height = pxToRelative(data.height);\n            data.width = pxToRelative(data.width);\n        }\n\n        // Save our CSS template file\n        loadTemplate(options.templateSrc, options.templateDest);\n\n        // If a demo file is required, save that too\n        if(options.demoDest) {\n            loadTemplate(options.demoSrc, options.demoDest);\n        }\n\n        // Create a file to pipe back to gulp\n        var file = new gutil.File({path: './', contents: new Buffer($.xml())});\n\n        // Pipe it baby!\n        self.push(file);\n\n        // Aaand we're done\n        cb();\n    }\n\n    return through2.obj(processSVG, processSprites);\n};\n\nmodule.exports = spriteSVG;\n","/home/travis/build/npmtest/node-npmtest-gulp-svg-spritesheet/node_modules/gulp-svg-spritesheet/lib/packer.growing.js":"/******************************************************************************\n\nBinary Tree Algorithm for 2D Bin Packing\nhttps://github.com/jakesgordon/bin-packing\n\n---\n\nCopyright (c) 2011, 2012, 2013 Jake Gordon and contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n---\n\nThis is a binary tree based bin packing algorithm that is more complex than\nthe simple Packer (packer.js). Instead of starting off with a fixed width and\nheight, it starts with the width and height of the first block passed and then\ngrows as necessary to accomodate each subsequent block. As it grows it attempts\nto maintain a roughly square ratio by making 'smart' choices about whether to\ngrow right or down.\n\nWhen growing, the algorithm can only grow to the right OR down. Therefore, if\nthe new block is BOTH wider and taller than the current target then it will be\nrejected. This makes it very important to initialize with a sensible starting\nwidth and height. If you are providing sorted input (largest first) then this\nwill not be an issue.\n\nA potential way to solve this limitation would be to allow growth in BOTH\ndirections at once, but this requires maintaining a more complex tree\nwith 3 children (down, right and center) and that complexity can be avoided\nby simply chosing a sensible starting block.\n\nBest results occur when the input blocks are sorted by height, or even better\nwhen sorted by max(width,height).\n\nInputs:\n------\n\n  blocks: array of any objects that have .w and .h attributes\n\nOutputs:\n-------\n\n  marks each block that fits with a .fit attribute pointing to a\n  node with .x and .y coordinates\n\nExample:\n-------\n\n  var blocks = [\n    { w: 100, h: 100 },\n    { w: 100, h: 100 },\n    { w:  80, h:  80 },\n    { w:  80, h:  80 },\n    etc\n    etc\n  ];\n\n  var packer = new GrowingPacker();\n  packer.fit(blocks);\n\n  for(var n = 0 ; n < blocks.length ; n++) {\n    var block = blocks[n];\n    if (block.fit) {\n      Draw(block.fit.x, block.fit.y, block.w, block.h);\n    }\n  }\n\n\n******************************************************************************/\n\nGrowingPacker = function() { };\n\nGrowingPacker.prototype = {\n\n  fit: function(blocks) {\n    var n, node, block, len = blocks.length;\n    var w = len > 0 ? blocks[0].w+blocks[0].padding : 0;\n    var h = len > 0 ? blocks[0].h+blocks[0].padding : 0;\n\n    this.root = { x: 0, y: 0, w: w, h: h };\n    for (n = 0; n < len ; n++) {\n      block = blocks[n];\n      if (node = this.findNode(this.root, block.w+block.padding, block.h+block.padding))\n        block.fit = this.splitNode(node, block.w+block.padding, block.h+block.padding);\n      else\n        block.fit = this.growNode(block.w+block.padding, block.h+block.padding);\n    }\n  },\n\n  findNode: function(root, w, h) {\n    if (root.used)\n      return this.findNode(root.right, w, h) || this.findNode(root.down, w, h);\n    else if ((w <= root.w) && (h <= root.h))\n      return root;\n    else\n      return null;\n  },\n\n  splitNode: function(node, w, h) {\n    node.used = true;\n    node.down  = { x: node.x,     y: node.y + h, w: node.w,     h: node.h - h };\n    node.right = { x: node.x + w, y: node.y,     w: node.w - w, h: h          };\n    return node;\n  },\n\n  growNode: function(w, h) {\n    var canGrowDown  = (w <= this.root.w);\n    var canGrowRight = (h <= this.root.h);\n\n    var shouldGrowRight = canGrowRight && (this.root.h >= (this.root.w + w)); // attempt to keep square-ish by growing right when height is much greater than width\n    var shouldGrowDown  = canGrowDown  && (this.root.w >= (this.root.h + h)); // attempt to keep square-ish by growing down  when width  is much greater than height\n\n    if (shouldGrowRight)\n      return this.growRight(w, h);\n    else if (shouldGrowDown)\n      return this.growDown(w, h);\n    else if (canGrowRight)\n     return this.growRight(w, h);\n    else if (canGrowDown)\n      return this.growDown(w, h);\n    else\n      return null; // need to ensure sensible root starting size to avoid this happening\n  },\n\n  growRight: function(w, h) {\n    this.root = {\n      used: true,\n      x: 0,\n      y: 0,\n      w: this.root.w + w,\n      h: this.root.h,\n      down: this.root,\n      right: { x: this.root.w, y: 0, w: w, h: this.root.h }\n    };\n    if (node = this.findNode(this.root, w, h))\n      return this.splitNode(node, w, h);\n    else\n      return null;\n  },\n\n  growDown: function(w, h) {\n    this.root = {\n      used: true,\n      x: 0,\n      y: 0,\n      w: this.root.w,\n      h: this.root.h + h,\n      down:  { x: 0, y: this.root.h, w: this.root.w, h: h },\n      right: this.root\n    };\n    if (node = this.findNode(this.root, w, h))\n      return this.splitNode(node, w, h);\n    else\n      return null;\n  }\n\n}\n\n"}